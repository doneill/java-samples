(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function feature(r,e,t,o){if(void 0===r)throw new Error("geometry is required");if(e&&e.constructor!==Object)throw new Error("properties must be an Object");if(t&&4!==t.length)throw new Error("bbox must be an Array of 4 numbers");if(o&&-1===["string","number"].indexOf(typeof o))throw new Error("id must be a number or a string");var n={type:"Feature"};return o&&(n.id=o),t&&(n.bbox=t),n.properties=e||{},n.geometry=r,n}function geometry(r,e,t){if(!r)throw new Error("type is required");if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(t&&4!==t.length)throw new Error("bbox must be an Array of 4 numbers");var o;switch(r){case"Point":o=point(e).geometry;break;case"LineString":o=lineString(e).geometry;break;case"Polygon":o=polygon(e).geometry;break;case"MultiPoint":o=multiPoint(e).geometry;break;case"MultiLineString":o=multiLineString(e).geometry;break;case"MultiPolygon":o=multiPolygon(e).geometry;break;default:throw new Error(r+" is invalid")}return t&&(o.bbox=t),o}function point(r,e,t,o){if(!r)throw new Error("No coordinates passed");if(void 0===r.length)throw new Error("Coordinates must be an array");if(r.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(!isNumber(r[0])||!isNumber(r[1]))throw new Error("Coordinates must contain numbers");return feature({type:"Point",coordinates:r},e,t,o)}function polygon(r,e,t,o){if(!r)throw new Error("No coordinates passed");for(var n=0;n<r.length;n++){var i=r[n];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var a=0;a<i[i.length-1].length;a++){if(0===n&&0===a&&!isNumber(i[0][0])||!isNumber(i[0][1]))throw new Error("Coordinates must contain numbers");if(i[i.length-1][a]!==i[0][a])throw new Error("First and last Position are not equivalent.")}}return feature({type:"Polygon",coordinates:r},e,t,o)}function lineString(r,e,t,o){if(!r)throw new Error("No coordinates passed");if(r.length<2)throw new Error("Coordinates must be an array of two or more positions");if(!isNumber(r[0][1])||!isNumber(r[0][1]))throw new Error("Coordinates must contain numbers");return feature({type:"LineString",coordinates:r},e,t,o)}function featureCollection(r,e,t){if(!r)throw new Error("No features passed");if(!Array.isArray(r))throw new Error("features must be an Array");if(e&&4!==e.length)throw new Error("bbox must be an Array of 4 numbers");if(t&&-1===["string","number"].indexOf(typeof t))throw new Error("id must be a number or a string");var o={type:"FeatureCollection"};return t&&(o.id=t),e&&(o.bbox=e),o.features=r,o}function multiLineString(r,e,t,o){if(!r)throw new Error("No coordinates passed");return feature({type:"MultiLineString",coordinates:r},e,t,o)}function multiPoint(r,e,t,o){if(!r)throw new Error("No coordinates passed");return feature({type:"MultiPoint",coordinates:r},e,t,o)}function multiPolygon(r,e,t,o){if(!r)throw new Error("No coordinates passed");return feature({type:"MultiPolygon",coordinates:r},e,t,o)}function geometryCollection(r,e,t,o){if(!r)throw new Error("geometries is required");if(!Array.isArray(r))throw new Error("geometries must be an Array");return feature({type:"GeometryCollection",geometries:r},e,t,o)}function round(r,e){if(void 0===r||null===r||isNaN(r))throw new Error("num is required");if(e&&!(e>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,e||0);return Math.round(r*t)/t}function radiansToDistance(r,e){if(void 0===r||null===r)throw new Error("radians is required");var t=factors[e||"kilometers"];if(!t)throw new Error("units is invalid");return r*t}function distanceToRadians(r,e){if(void 0===r||null===r)throw new Error("distance is required");var t=factors[e||"kilometers"];if(!t)throw new Error("units is invalid");return r/t}function distanceToDegrees(r,e){return radians2degrees(distanceToRadians(r,e))}function bearingToAngle(r){if(null===r||void 0===r)throw new Error("bearing is required");var e=r%360;return e<0&&(e+=360),e}function radians2degrees(r){if(null===r||void 0===r)throw new Error("radians is required");return r%(2*Math.PI)*180/Math.PI}function degrees2radians(r){if(null===r||void 0===r)throw new Error("degrees is required");return r%360*Math.PI/180}function convertDistance(r,e,t){if(null===r||void 0===r)throw new Error("distance is required");if(!(r>=0))throw new Error("distance must be a positive number");return radiansToDistance(distanceToRadians(r,e),t||"kilometers")}function convertArea(r,e,t){if(null===r||void 0===r)throw new Error("area is required");if(!(r>=0))throw new Error("area must be a positive number");var o=areaFactors[e||"meters"];if(!o)throw new Error("invalid original units");var n=areaFactors[t||"kilometers"];if(!n)throw new Error("invalid final units");return r/o*n}function isNumber(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}var factors={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,centimeters:6373e5,centimetres:6373e5,kilometers:6373,kilometres:6373,feet:20908792.65},areaFactors={kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,centimetres:1e4,millimeter:1e6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};module.exports={feature:feature,geometry:geometry,featureCollection:featureCollection,geometryCollection:geometryCollection,point:point,multiPoint:multiPoint,lineString:lineString,multiLineString:multiLineString,polygon:polygon,multiPolygon:multiPolygon,radiansToDistance:radiansToDistance,distanceToRadians:distanceToRadians,distanceToDegrees:distanceToDegrees,radians2degrees:radians2degrees,degrees2radians:degrees2radians,bearingToAngle:bearingToAngle,convertDistance:convertDistance,convertArea:convertArea,round:round,isNumber:isNumber};
},{}],2:[function(require,module,exports){
module.exports={helpers:require("@turf/helpers")};
},{"@turf/helpers":1}]},{},[2])(2)
});